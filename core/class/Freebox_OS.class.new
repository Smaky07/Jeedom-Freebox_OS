<?php
/* This file is part of Jeedom.
 *
 * Jeedom is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Jeedom is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Jeedom. If not, see <http://www.gnu.org/licenses/>.
 */

/* * ***************************Includes********************************* */
require_once dirname(__FILE__) . '/../../../../core/php/core.inc.php';
include_file('core', 'freebox', 'class', 'Freebox_OS');

class Freebox_OS extends eqLogic {
	public static function AddEqLogic($Name,$_logicalId) {
			$EqLogic = self::byLogicalId($_logicalId, 'Freebox_OS');
			if (!is_object($EqLogic)) {
				$EqLogic = new Freebox_OS();
				$EqLogic->setLogicalId($_logicalId);
				$EqLogic->setObject_id(null);
				$EqLogic->setEqType_name('Freebox_OS');
				$EqLogic->setIsEnable(1);
				$EqLogic->setIsVisible(0);
			}
			$EqLogic->setName($Name);
			$EqLogic->save();
			return $EqLogic;
		}
	public static function AddCommande($eqLogic,$Name,$_logicalId,$Type="info", $SubType='binary', $Template='', $unite='') {
		$Commande = $eqLogic->getCmd(null,$_logicalId);
		if (!is_object($Commande))
		{
			$VerifName=$Name;
			$Commande = new Freebox_OSCmd();
			$Commande->setId(null);
			$Commande->setLogicalId($_logicalId);
			$Commande->setEqLogic_id($eqLogic->getId());
			$Commande->setType($Type);
			$Commande->setSubType($SubType);
			$count=0;
			while (is_object(cmd::byEqLogicIdCmdName($eqLogic->getId(),$VerifName)))
			{
				$count++;
				$VerifName=$Name.'('.$count.')';
			}
			$Commande->setCache('enable', 1);
			$Commande->setCache('lifetime', 60);
			$Commande->setName($VerifName);
			$Commande->setTemplate('dashboard',$Template);
			$Commande->setTemplate('mobile', $Template);
			$Commande->setUnite($unite);
			$Commande->save();
		}
		return $Commande;
	}
	public static function CreateArchi() {
		// ADSL
		$ADSL=self::AddEqLogic('ADSL','ADSL');
		self::AddCommande($ADSL,'Freebox rate down','rate_down',"info",'numeric','Freebox_OS_Adsl');
		self::AddCommande($ADSL,'Freebox rate up','rate_up',"info",'numeric','Freebox_OS_Adsl');
		self::AddCommande($ADSL,'Freebox bandwidth up','bandwidth_up',"info",'numeric','Freebox_OS_Adsl');
		self::AddCommande($ADSL,'Freebox bandwidth down','bandwidth_down',"info",'numeric','Freebox_OS_Adsl');
		self::AddCommande($ADSL,'Freebox media','media',"info",'string','Freebox_OS_Adsl');
		self::AddCommande($ADSL,'Freebox state','state',"info",'string','Freebox_OS_Adsl');
		$System=self::AddEqLogic('Système','System');
		self::AddCommande($System,'Reboot','reboot',"action",'other','Freebox_OS_System');
		$StatusWifi=self::AddCommande($System,'Status du wifi','wifiStatut',"info",'binary','Freebox_OS_Wifi');
		$ActiveWifi=self::AddCommande($System,'Active/Désactive le wifi','wifiOnOff',"action",'other','Freebox_OS_Wifi');
		$ActiveWifi->setValue($StatusWifi->getId());
		$ActiveWifi->save();
		self::AddCommande($System,'Freebox firmware version','firmware_version',"info",'string','Freebox_OS_System');
		self::AddCommande($System,'Mac','mac',"info",'string','Freebox_OS_System');
		self::AddCommande($System,'Vitesse ventillateur','fan_rpm',"info",'string','Freebox_OS_System','tr/min');
		self::AddCommande($System,'temp sw','temp_sw',"info",'string','Freebox_OS_System','°C');
		self::AddCommande($System,'Allumée depuis','uptime',"info",'string','Freebox_OS_System');
		self::AddCommande($System,'board name','board_name',"info",'string','Freebox_OS_System');
		self::AddCommande($System,'temp cpub','temp_cpub',"info",'string','Freebox_OS_System','°C');
		self::AddCommande($System,'temp cpum','temp_cpum',"info",'string','Freebox_OS_System','°C');
		self::AddCommande($System,'serial','serial',"info",'string','Freebox_OS_System');
		self::AddCommande($System,'Wifi On','wifiStatut_On_var',"action",'other','Freebox_OS_Wifi');
		self::AddCommande($System,'Wifi Off','wifiStatut_Off_var',"action",'other','Freebox_OS_Wifi');
		$Disque=self::AddEqLogic('Disque Dur','Disque');
		self::AddCommande($Disque,'Freebox disquesStatut_json','disquesStatut',"info",'string','Freebox_OS_Disque');
		self::AddCommande($Disque,'Occupation du disque dur interne','DD_Interne',"info",'numeric','Freebox_OS_Disque','%');
		$Phone=self::AddEqLogic('Téléphone','Phone');
		self::AddCommande($Phone,'Nombre Appels Manqués','nbAppelsManquee',"info",'numeric','Freebox_OS_Phone');
		self::AddCommande($Phone,'Nombre Appels Reçus','nbAppelRecus',"info",'numeric','Freebox_OS_Phone');
		self::AddCommande($Phone,'Nombre Appels Passés','nbAppelPasse',"info",'numeric','Freebox_OS_Phone');
		self::AddCommande($Phone,'Liste Appels Manqués','listAppelsManquee',"info",'string','Freebox_OS_Phone');
		self::AddCommande($Phone,'Liste Appels Reçus','listAppelsRecus',"info",'string','Freebox_OS_Phone');
		self::AddCommande($Phone,'Liste Appels Passés','listAppelsPasse',"info",'string','Freebox_OS_Phone');
		if(config::byKey('FREEBOX_SERVER_TRACK_ID')!='')
		{
			self::disques();
			self::wifi();
			self::system();
			self::adslStats();
			self::nb_appel_absence();
			self::freeboxPlayerPing();
		}
    }
	public function toHtml($_version = 'mobile') {
		$_version = jeedom::versionAlias($_version);
		$replace = array(
			'#id#' => $this->getId(),
			'#name#' => ($this->getIsEnable()) ? $this->getName() : '<del>' . $this->getName() . '</del>',
			'#eqLink#' => $this->getLinkToConfiguration(),
			'#background#' => $this->getBackgroundColor($_version),		
			'#height#' => $this->getDisplay('height', 'auto'),
			'#width#' => $this->getDisplay('width', '250'),
		);
		if($this->getLogicalId()=='Reseau'||$this->getLogicalId()=='System')
		{
			if ($this->getIsEnable()) {
				$EquipementsHtml='';
				foreach ($this->getCmd(null, null, true) as $cmd) {
					$replaceCmd['#host_type#'] = $cmd->getConfiguration('host_type');
					$replaceCmd['#IPV4#'] = $cmd->getConfiguration('IPV4');
					$replaceCmd['#IPV6#'] = $cmd->getConfiguration('IPV6');
					$EquipementsHtml.=template_replace($replaceCmd, $cmd->toHtml($_version));
				}
			}     
			$replace['#Equipements#'] = $EquipementsHtml;
		}
		else
		{
			if ($this->getIsEnable()) {
				foreach ($this->getCmd(null, null, true) as $cmd) {
					 $replace['#'.$cmd->getLogicalId().'#'] = $cmd->toHtml($_version);
				}
			}     
		}
		if ($_version == 'dview' || $_version == 'mview') {
			$object = $this->getObject();
			$replace['#name#'] = (is_object($object)) ? $object->getName() . ' - ' . $replace['#name#'] : $replace['#name#'];
		}
		
		return template_replace($replace, getTemplate('core', $_version, $this->getLogicalId(),'Freebox_OS'));
	}
	public static function freeboxPlayerPing(){
		$freebox = new apifreebox();
		$configuration = new Configuration($freebox);
		$listEquipement=$freebox->DisplayResult($configuration->GetLANHosts('pub'));	
		$Reseau=Freebox_OS::AddEqLogic('Réseau','Reseau');
		foreach($listEquipement['result'] as $Equipement)
		{
			if($Equipement['primary_name']!='')
			{
				$Commande=Freebox_OS::AddCommande($Reseau,$Equipement['primary_name'],$Equipement['id'],"info",'binary','Freebox_OS_Reseau');
				$Commande->setConfiguration('host_type',$Equipement['host_type']);
				if (isset($result['l3connectivities']))
				{
					foreach($Equipement['l3connectivities'] as $Ip){
						if ($Ip['active']){
							if($Ip['af']=='ipv4')
								$Commande->setConfiguration('IPV4',$Ip['addr']);
							else
								$Commande->setConfiguration('IPV6',$Ip['addr']);
						}
					}
				}
				if($Commande->execCmd(null,2) != $Equipement['active']){
					$Commande->setCollectDate('');
					$Commande->event($Equipement['active']);
				}
				$Commande->save();	
			}
		}
	}
	public static function cronHourly() {
		self::freeboxPlayerPing();
	}
}
class Freebox_OSCmd extends cmd {
	public function execute($_options = array())	{
		$freebox = new apifreebox();
		log::add('FreeboxOs','debug',$freebox->getMessage());
		switch ($this->getLogicalId())
		{
			case "rate_down":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"rate_down");	
			break;
			case "rate_up":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"rate_up");	
			break;
			case "bandwidth_up":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"bandwidth_up");	
			break;
			case "bandwidth_down":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"bandwidth_down");	
			break;
			case "media":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"media");	
			break;
			case "state":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetConnnectionStatus(),"state");	
			break;
			case "reboot":
				$system = new System($freebox);
				$freebox->DisplayResult($system->Reboot(),"reboot");	
			break;
			case "mac":
				$system = new System($freebox);
				log::add('FreeboxOs','debug',json_encode($system->GetSystemStatus()));
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "fan_rpm":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "temp_sw":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "uptime":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "board_name":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "temp_cpub":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "temp_cpum":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "serial":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "firmware_version":
				$system = new System($freebox);
				$return=$freebox->DisplayResult($system->GetSystemStatus(),"mac");	
			break;
			case "wifiStatut":
				$configuration = new Configuration($freebox);
				$return=$freebox->DisplayResult($configuration->GetWifiStatus(),"wifi");
			break;
			case "wifiOnOff":
				$configuration = new Configuration($freebox);
				$result=$freebox->DisplayResult($configuration->GetWifiStatus(),"wifi");
				if($result==true) 
					$array_config = array("ap_params" => array( "enabled" => true));
				else
					$array_config = array("ap_params" => array( "enabled" => false));
				$freebox->DisplayResult($configuration->UpdateWifiConfig($array_config),"wifi");
			break;
			case 'wifiStatut_On_var':
				$configuration = new Configuration($freebox);
				$array_config = array("ap_params" => array( "enabled" => true));
				$freebox->DisplayResult($configuration->UpdateWifiConfig($array_config),"wifi");
			break;
			case 'wifiStatut_Off_var':				
				$configuration = new Configuration($freebox);
				$array_config = array("ap_params" => array( "enabled" => false));
				$freebox->DisplayResult($configuration->UpdateWifiConfig($array_config),"wifi");
			break;
			case "disquesStatut":
			break;
			case "DD_Interne":
			break;
			case "nbAppelsManquee":
			break;
			case "nbAppelRecus":
			break;
			case "nbAppelPasse":
			break;
			case "listAppelsManquee":
			break;
			case "listAppelsRecus":
			break;
			case "listAppelsPasse":
			break;
			default:
			if($this->getEqLogic()->getLogicalId()=='Reseau'){
				$configuration = new Configuration($freebox);
				$result=$freebox->DisplayResult($configuration->GetLANHostsInformation('pub',$this->getLogicalId()));
				if (isset($result['l3connectivities']))				{
					foreach($result['l3connectivities'] as $Ip){
						if ($Ip['active']){
							if($Ip['af']=='ipv4')
								$this->setConfiguration('IPV4',$Ip['addr']);
							else
								$this->setConfiguration('IPV6',$Ip['addr']);
						}
					}
				}
				$this->setConfiguration('host_type',$result['host_type']);
				$this->save();
				if (isset($result['active']))
					$return=$result['active'];
				else
					$return=false;
			}
			break;
		}		
		log::add('FreeboxOs','debug',$return);
		if(isset($return)&&$this->execCmd() !=$return){
			$this->setCollectDate('');
			$this->event($return);
			$this->getEqLogic()->refreshWidget();
			return $return;
		}
	}
}